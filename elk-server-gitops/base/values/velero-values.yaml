namespace:
  labels: {}
image:
  repository: velero/velero
  tag: v1.13.0
  pullPolicy: IfNotPresent
  imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
annotations: {}
secretAnnotations: {}
labels: {}
podAnnotations: {}
podLabels: 
  boilerplate: component
resources:
  requests:
    cpu: 500m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi
upgradeJobResources: {}
upgradeCRDsJob:
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: {}
dnsPolicy: ClusterFirst
initContainers:
podSecurityContext: {}
containerSecurityContext: {}
lifecycle: {}
priorityClassName: ""
terminationGracePeriodSeconds: 3600
livenessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
readinessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
tolerations: []
affinity: {}
nodeSelector: {}
dnsConfig: {}
extraVolumes: []
extraVolumeMounts: []
extraObjects: []
metrics:
  enabled: true
  scrapeInterval: 30s
  scrapeTimeout: 10s
  service:
    annotations: {}
    labels: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"
  serviceMonitor:
    autodetect: true
    enabled: false
    annotations: {}
    additionalLabels: {}
  nodeAgentPodMonitor:
    autodetect: true
    enabled: false
    annotations: {}
    additionalLabels: {}
  prometheusRule:
    autodetect: true
    enabled: false
    additionalLabels: {}
    spec: []
kubectl:
  image:
    repository: docker.io/bitnami/kubectl
  containerSecurityContext: {}
  resources: {}
  annotations: {}
  labels: {}
upgradeCRDs: false
cleanUpCRDs: false
configuration:
  backupStorageLocation:
  - name: default
    provider: azure
    bucket: velero-bkp
    caCert:
    prefix:
    default: true
    validationFrequency:
    accessMode: ReadWrite
    credential:
      name: velero
      key: cloud
    config:
      resourceGroup: rg-sandbox-neu-tfstate
      subscriptionId: 5ad4aba7-f6b9-40cb-987d-5efbd3ba320d
      storageAccount: stsandboxneutfstate30252
  volumeSnapshotLocation:
  - name: azure-snapshots
    provider: azure
    credential:
      name: velero
      key: cloud
    config:
      apiTimeout: 5m
      resourceGroup: rg-devops-sandbox-01
      subscriptionId: 6a52beeb-7dc0-4c29-bcb6-be63688bd582
      incremental: true
  uploaderType:
  backupSyncPeriod:
  fsBackupTimeout:
  clientBurst:
  clientPageSize:
  clientQPS:
  defaultBackupStorageLocation:
  defaultItemOperationTimeout:
  defaultBackupTTL:
  defaultVolumeSnapshotLocations:
  disableControllers:
  garbageCollectionFrequency:
  logFormat:
  logLevel:
  metricsAddress:
  pluginDir:
  profilerAddress:
  restoreOnlyMode:
  restoreResourcePriorities:
  storeValidationFrequency:
  terminatingResourceTimeout:
  defaultSnapshotMoveData:
  features:
  namespace:
  extraEnvVars: {}
  defaultVolumesToFsBackup:
  defaultRepoMaintainFrequency:
rbac:
  create: true
  clusterAdministrator: true
  clusterAdministratorName: cluster-admin
serviceAccount:
  server:
    create: true
    name:
    annotations:
    labels:
credentials:
  useSecret: true
  name:
  existingSecret:
  secretContents: {}
  extraEnvVars: {}
  extraSecretRef: ""
backupsEnabled: true
snapshotsEnabled: true
deployNodeAgent: false
nodeAgent:
  podVolumePath: /var/lib/kubelet/pods
  priorityClassName: ""
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi
  tolerations: []
  annotations: {}
  labels: {}
  useScratchEmptyDir: true
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: {}
  dnsPolicy: ClusterFirst
  podSecurityContext:
    runAsUser: 0
  containerSecurityContext: {}
  lifecycle: {}
  nodeSelector: {}
  affinity: {}
  dnsConfig: {}
schedules: {}
configMaps: {}
